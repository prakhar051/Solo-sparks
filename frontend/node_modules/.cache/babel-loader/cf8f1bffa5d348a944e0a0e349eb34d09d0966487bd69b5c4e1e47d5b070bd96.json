{"ast":null,"code":"var _jsxFileName = \"C:\\\\Resume Project\\\\solo-sparks\\\\frontend\\\\src\\\\pages\\\\ProgressPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport API from '../utils/api';\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(BarElement, CategoryScale, LinearScale);\nconst ProgressPage = () => {\n  _s();\n  const [data, setData] = useState({\n    labels: [],\n    values: []\n  });\n  useEffect(() => {\n    const fetch = async () => {\n      const res = await API.get('/reflections');\n      const grouped = {};\n      res.data.forEach(r => {\n        const date = new Date(r.submittedAt).toLocaleDateString();\n        grouped[date] = (grouped[date] || 0) + 1;\n      });\n      setData({\n        labels: Object.keys(grouped),\n        values: Object.values(grouped)\n      });\n    };\n    fetch();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-xl mx-auto mt-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4 text-center\",\n      children: \"Your Progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: {\n        labels: data.labels,\n        datasets: [{\n          label: 'Reflections Submitted',\n          data: data.values,\n          backgroundColor: '#3b82f6'\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgressPage, \"DKuELV1FbwvZZXeM7pwTXSiAcy4=\");\n_c = ProgressPage;\nexport default ProgressPage;\nvar _c;\n$RefreshReg$(_c, \"ProgressPage\");","map":{"version":3,"names":["React","useEffect","useState","Bar","API","Chart","ChartJS","BarElement","CategoryScale","LinearScale","jsxDEV","_jsxDEV","register","ProgressPage","_s","data","setData","labels","values","fetch","res","get","grouped","forEach","r","date","Date","submittedAt","toLocaleDateString","Object","keys","className","children","fileName","_jsxFileName","lineNumber","columnNumber","datasets","label","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Resume Project/solo-sparks/frontend/src/pages/ProgressPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport API from '../utils/api';\r\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale } from 'chart.js';\r\n\r\nChartJS.register(BarElement, CategoryScale, LinearScale);\r\n\r\nconst ProgressPage = () => {\r\n  const [data, setData] = useState({ labels: [], values: [] });\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const res = await API.get('/reflections');\r\n      const grouped = {};\r\n      res.data.forEach(r => {\r\n        const date = new Date(r.submittedAt).toLocaleDateString();\r\n        grouped[date] = (grouped[date] || 0) + 1;\r\n      });\r\n      setData({\r\n        labels: Object.keys(grouped),\r\n        values: Object.values(grouped)\r\n      });\r\n    };\r\n    fetch();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"max-w-xl mx-auto mt-10\">\r\n      <h2 className=\"text-xl font-bold mb-4 text-center\">Your Progress</h2>\r\n      <Bar\r\n        data={{\r\n          labels: data.labels,\r\n          datasets: [\r\n            {\r\n              label: 'Reflections Submitted',\r\n              data: data.values,\r\n              backgroundColor: '#3b82f6',\r\n            }\r\n          ]\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAOC,GAAG,MAAM,cAAc;AAC9B,SAASC,KAAK,IAAIC,OAAO,EAAEC,UAAU,EAAEC,aAAa,EAAEC,WAAW,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpFL,OAAO,CAACM,QAAQ,CAACL,UAAU,EAAEC,aAAa,EAAEC,WAAW,CAAC;AAExD,MAAMI,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC;IAAEe,MAAM,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAG,CAAC,CAAC;EAE5DjB,SAAS,CAAC,MAAM;IACd,MAAMkB,KAAK,GAAG,MAAAA,CAAA,KAAY;MACxB,MAAMC,GAAG,GAAG,MAAMhB,GAAG,CAACiB,GAAG,CAAC,cAAc,CAAC;MACzC,MAAMC,OAAO,GAAG,CAAC,CAAC;MAClBF,GAAG,CAACL,IAAI,CAACQ,OAAO,CAACC,CAAC,IAAI;QACpB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,CAAC,CAACG,WAAW,CAAC,CAACC,kBAAkB,CAAC,CAAC;QACzDN,OAAO,CAACG,IAAI,CAAC,GAAG,CAACH,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MAC1C,CAAC,CAAC;MACFT,OAAO,CAAC;QACNC,MAAM,EAAEY,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC;QAC5BJ,MAAM,EAAEW,MAAM,CAACX,MAAM,CAACI,OAAO;MAC/B,CAAC,CAAC;IACJ,CAAC;IACDH,KAAK,CAAC,CAAC;EACT,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA;IAAKoB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrCrB,OAAA;MAAIoB,SAAS,EAAC,oCAAoC;MAAAC,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrEzB,OAAA,CAACR,GAAG;MACFY,IAAI,EAAE;QACJE,MAAM,EAAEF,IAAI,CAACE,MAAM;QACnBoB,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,uBAAuB;UAC9BvB,IAAI,EAAEA,IAAI,CAACG,MAAM;UACjBqB,eAAe,EAAE;QACnB,CAAC;MAEL;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CApCID,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAsClB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}